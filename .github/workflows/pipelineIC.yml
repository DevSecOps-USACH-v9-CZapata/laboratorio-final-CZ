name: Workflow
on:
  push:
    branches:
      - Work

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Install dependencies
        run: npm install  

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Analisis con SonarCloud
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.projectKey=DevSecOps-USACH-v9-CZapata_laboratorio-final-CZ
            -Dsonar.organization=devsecops-usach-v9-czapata
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN2 }}
      
      - name: Validar vulnerabilidades
        run: |
          echo "Analizando vulnerabilidades"
          response=$(curl -s "https://sonarcloud.io/api/issues/search?componentKeys=DevSecOps-USACH-v9-CZapata_laboratorio-final-CZ&types=VULNERABILITY&severities=BLOCKER,CRITICAL,MAJOR")
          echo "Respuesta de SonarCloud: $response"
          vulnerabilities=$(echo "$response" | jq -r '.total // 0')
          if [[ ! "$vulnerabilities" =~ ^[0-9]+$ ]]; then
            echo "La variable vulnerabilities no contiene un número válido. Valor recibido: '$vulnerabilities'"
            exit 1
          fi
          echo "Valor de variable: $vulnerabilities"

          # Verificar si se encontraron vulnerabilidades
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "Se encontraron $vulnerabilities vulnerabilidades críticas, altas o medias. Deteniendo pipeline."
          # Descomenta para detener el pipeline
          # exit 1
          else
            echo "No se encontraron vulnerabilidades críticas, altas o medias."
          fi

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: OWASP Dependency Check
        run: |
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v11.1.1/dependency-check-11.1.1-release.zip -o dependency-check.zip
          unzip dependency-check.zip -d $HOME/dependency-check
          
      - name: Debug Dependency Check
        run: ls -l $HOME/dependency-check/dependency-check/bin
  
      - name: Make dependency-check.sh executable
        run: chmod +x $HOME/dependency-check/dependency-check/bin/dependency-check.sh
  
      - name: Run Dependency Check
        run: |
          $HOME/dependency-check/dependency-check/bin/dependency-check.sh \
            --project "laboratorio-final-CZ" \
            --scan . \
            --out ./dependency-check-report \
            --format "ALL"
      - name: Subir reporte
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check-report/*.html
      - name: Validar vulnerabilidades de dependencias
        run: |
          # Verifica si existen vulnerabilidades críticas, altas o medias en el reporte generado
          vulnerabilities=$(grep -E 'CRITICAL|HIGH|MEDIUM' ./dependency-check-report/*.html | wc -l)
          echo "Número de vulnerabilidades críticas, altas o medias encontradas: $vulnerabilities"
          if [ "$vulnerabilities" -gt 0 ]; then
            echo "Se encontraron vulnerabilidades críticas, altas o medias. Deteniendo el pipeline."
            #exit 1  # Hace que el pipeline falle si se encuentran vulnerabilidades
          else
            echo "No se encontraron vulnerabilidades críticas, altas o medias."
          fi 

  Docker_image:
    needs: SCA
    #needs: SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/laboratorio_cz:latest .

      - name: Push image a Docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/laboratorio_cz

  Trivy:
    needs: Docker_image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push DOcker
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/laboratorio_cz:latest

      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/laboratorio_cz:latest
          format: table
          severity: HIGH,CRITICAL

        continue-on-error: false

  Docker_Local:
    needs: Trivy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/laboratorio_cz:latest

      - name: Run Docker Container
        run: |
          echo "Iniciando contenedor en Docker local..."
          docker run -d --name laboratorio_cz_container -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/laboratorio_cz:latest
          echo "Contenedor iniciado con éxito."

      - name: Verificar contenedor
        run: |
          echo "Verificando que el contenedor esté corriendo..."
          docker ps | grep laboratorio_cz_container || (echo "El contenedor no está corriendo" && exit 1)

      - name: Validar endpoint del contenedor
        run: |
          echo "Validando el endpoint del contenedor..."
          sleep 10  # Tiempo para que el contenedor se inicialice
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          if [ "$response" -ne 200 ]; then
            echo "El contenedor no responde correctamente. Código HTTP: $response"
            exit 1
          fi
          echo "El contenedor respondió correctamente."
      - name: Mostrar curl de sitio
        run: |
          echo "Inicio de website"
          curl  http://localhost:3000
          echo "Fin de website :D"
          
      - name: Stop and Remove Container
        run: |
          echo "Deteniendo y eliminando el contenedor..."
          docker stop laboratorio_cz_container
          docker rm laboratorio_cz_container
